// Copyright (c) 2018 NEC Laboratories Europe GmbH.
//
// Authors: Sergey Fedorov <sergey.fedorov@neclab.eu>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package minbft

import (
	"fmt"

	"github.com/hyperledger-labs/minbft/api"
	"github.com/hyperledger-labs/minbft/core/internal/peerstate"
	"github.com/hyperledger-labs/minbft/messages"
	"github.com/hyperledger-labs/minbft/usig"
	"github.com/hyperledger-labs/minbft/usig/sgx"
)

const (
	secretSize = 16
)

// uiCapturer synchronizes beginning of sequential processing of USIG
// unique identifier.
//
// Processing of UIs generated by the same replica is synchronized by
// waiting to ensure each of the UIs is processed only once and in the
// order of counter value. The return value new indicates if the UI
// needs to be processed. If so, the processing has to be completed by
// invoking the returned release function. It is safe to invoke
// concurrently.
type uiCapturer func(msg messages.CertifiedMessage) (new bool, release func())

// uiVerifier verifies USIG certificate attached to a message.
//
// It verifies if the UI assigned to the message is correct and its
// USIG certificate is valid for the message. A UI with zero counter
// value is never valid.
type uiVerifier func(msg messages.CertifiedMessage) ([]byte, error)

// uiAssigner assigns a unique identifier to a message.
//
// USIG UI is assigned and attached to the supplied message.
type uiAssigner func(msg messages.CertifiedMessage)

// makeUICapturer constructs uiCapturer using the supplied interface.
func makeUICapturer(providePeerState peerstate.Provider) uiCapturer {
	return func(msg messages.CertifiedMessage) (new bool, release func()) {
		replicaID := msg.ReplicaID()
		peerState := providePeerState(replicaID)
		return peerState.CaptureUI(msg.UI())
	}
}

// makeUIVerifier constructs uiVerifier using the supplied external
// authenticator to verify USIG certificates.
func makeUIVerifier(id uint32, authen api.Authenticator, extractAuthenBytes authenBytesExtractor) uiVerifier {
	return func(msg messages.CertifiedMessage) ([]byte, error) {
		ui := msg.UI()
		if ui.Counter == uint64(0) {
			return nil, fmt.Errorf("invalid (zero) counter value")
		}
		cert := ui.Cert
		epoch, signature, encryptedShare, encryptedSecretH, err := sgx.ParseCert(cert)
		newEncryptedShare := encryptedShare[(id-1)*(secretSize+1):]
		newCert := sgx.MakeCert(epoch, signature, newEncryptedShare, encryptedSecretH)
		ui.Cert = newCert
		authenBytes := extractAuthenBytes(msg)
		uiBytes := usig.MustMarshalUI(ui)

		bb, err := authen.VerifyMessageAuthenTag(api.USIGAuthen, msg.ReplicaID(), authenBytes, uiBytes)
		if err != nil {
			return nil, fmt.Errorf("failed verifying USIG certificate: %s", err)
		}

		return bb, nil
	}
}

// makeUIAssigner constructs uiAssigner using the supplied external
// authentication interface to generate USIG UIs.
func makeUIAssigner(authen api.Authenticator, extractAuthenBytes authenBytesExtractor) uiAssigner {
	return func(msg messages.CertifiedMessage) {
		authenBytes := extractAuthenBytes(msg)
		uiBytes, err := authen.GenerateMessageAuthenTag(api.USIGAuthen, authenBytes)
		if err != nil {
			panic(err)
		}
		ui := usig.MustUnmarshalUI(uiBytes)
		msg.SetUI(ui)
	}
}
