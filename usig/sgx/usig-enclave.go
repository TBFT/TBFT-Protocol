// Copyright (c) 2018 NEC Laboratories Europe GmbH.
//
// Authors: Sergey Fedorov <sergey.fedorov@neclab.eu>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sgx

/*
// We use only a value of `Cflags` from pkg-config.
// So, this works also for the simulation mode.
#cgo pkg-config: libsgx_urts
#cgo CFLAGS: -I${SRCDIR}/shim
#cgo LDFLAGS: -ldl
#include <dlfcn.h>
#include <stdlib.h>
#include "usig.h"
// Wrappers to call a function through a function pointer,
// which is returned by dlsym().

sgx_status_t call_usig_init(const void *function, const char *enclave_file, sgx_enclave_id_t *enclave_id,
					  void * key, void *sealed_data, size_t sealed_data_size)
{
	return ((__typeof__(usig_init) *)function)(enclave_file, enclave_id,
					  key, sealed_data, sealed_data_size);
}
sgx_status_t call_usig_destroy(const void *function,
                               const sgx_enclave_id_t enclave_id)
{
	return ((__typeof__(usig_destroy) *) function)(enclave_id);
}

sgx_status_t call_usig_create_ui(const void *function,
                                 sgx_enclave_id_t enclave_id,
                                 sgx_sha256_hash_t digest,
                                 uint64_t *counter,
								 sgx_ec256_signature_t *signature,
								 void* encrypted_shares,
								 void* encrypted_secret_h)
{
	return ((__typeof__(usig_create_ui) *) function)
		(enclave_id, digest, counter, signature,encrypted_shares,encrypted_secret_h);
}

sgx_status_t call_usig_verify_ui(const void *function,
							sgx_enclave_id_t enclave_id,
							sgx_sha256_hash_t digest,
							sgx_ec256_signature_t * signature,
							void * encrypted_secret_h,
							void * encrypted_shares,
							void * shares,
							sgx_sha256_hash_t secret_h)
{
	return ((__typeof__(usig_verify_ui) *) function)
		(enclave_id, digest, signature,encrypted_secret_h, encrypted_shares, shares, secret_h);
}

sgx_status_t call_usig_get_epoch(const void *function,
                                 sgx_enclave_id_t enclave_id,
                                 uint64_t *epoch)
{
	return ((__typeof__(usig_get_epoch) *) function)(enclave_id, epoch);
}
sgx_status_t call_usig_get_pub_key(const void *function,
                                   sgx_enclave_id_t enclave_id,
                                   sgx_ec256_public_t *pub_key)
{
	return ((__typeof__(usig_get_pub_key) *) function)(enclave_id, pub_key);
}
sgx_status_t call_usig_seal_key(const void *function,
                                sgx_enclave_id_t enclave_id,
                                void **sealed_data,
                                size_t *sealed_data_size)
{
	return ((__typeof__(usig_seal_key) *) function)
		(enclave_id, sealed_data, sealed_data_size);
}
*/
import "C"

import (
	"bytes"
	"crypto"
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/sha256"
	"encoding/asn1"
	"encoding/binary"
	"errors"
	"fmt"
	"log"
	"math/big"
	"sync"
	"unsafe"
)

const (
	secretSize    = 16
	n             = 3
	f             = 1
	untrustedFile = "libusig_shim.so"
)

// Digest represents the data type of the message digest used to
// create unique identifiers
type Digest [sha256.Size]byte

// USIGEnclave represents a USIG enclave instance.
type USIGEnclave struct {
	// A handle of the dynamically loaded untrusted library.
	handle unsafe.Pointer
	// USIG enclave is supposed to be single-threaded. This lock
	// is used to synchronize ECall invocations and avoid
	// SGX_ERROR_OUT_OF_TCS error.
	ecallLock sync.Mutex
	enclaveID C.sgx_enclave_id_t
	epoch     uint64
}

// NewUSIGEnclave creates a new instance of USIG enclave. Note that
// the created instance has to be disposed with Destroy() method, e.g.
// using defer. A sealed key, previously retrieved by SealedKey(), can
// be supplied to initialize the enclave with that key pair. If nil is
// passed instead then a new key pair will be generated by the
// enclave.
func NewUSIGEnclave(enclaveFile string, key []byte, sealedKey []byte) (*USIGEnclave, error) {
	var err error
	enclave := new(USIGEnclave)
	enclave.handle, err = dlopen()
	if err != nil {
		return nil, err
	}

	sealedDataSize := C.size_t(len(sealedKey))
	var sealedData unsafe.Pointer

	var key_data unsafe.Pointer
	key_data = C.CBytes(key)

	if len(sealedKey) != 0 {
		sealedData = C.CBytes(sealedKey)
		defer C.free(sealedData)
	}

	file := C.CString(enclaveFile)
	defer C.free(unsafe.Pointer(file))
	sgxErr := C.call_usig_init(
		dlsymOrPanic(enclave.handle, "usig_init"),
		file, &enclave.enclaveID, key_data,
		sealedData, sealedDataSize,
	)
	if err := sgxError(sgxErr); err != nil {
		return nil, err
	}
	defer C.free(unsafe.Pointer(key_data))
	sgxSuccessOrPanic(C.call_usig_get_epoch(
		dlsymOrPanic(enclave.handle, "usig_get_epoch"),
		enclave.enclaveID, (*C.uint64_t)(&enclave.epoch)),
	)

	return enclave, nil
}

// Destroy destroys previously created USIG enclave instance. Must be
// called only once per each enclave instance
func (enclave *USIGEnclave) Destroy() {
	function := dlsymOrPanic(enclave.handle, "usig_destroy")

	// USIGEnclave is supposed to be exposed only after it has
	// been created and initialized successfully. Enclave destroy
	// can only fail if the enclave ID is not valid. That would
	// mean double-destroy here. This is deemed a programmer
	// error, similar to double-closing a channel, thus panic().
	enclave.ecallLock.Lock()
	sgxSuccessOrPanic(C.call_usig_destroy(function, enclave.enclaveID))
	enclave.ecallLock.Unlock()

	if err := dlclose(enclave.handle); err != nil {
		panic(err)
	}
}

// CreateUI assigns the next USIG counter value to the specified
// message digest. The assigned counter value and serialized USIG
// signature are returned.
func (enclave *USIGEnclave) CreateUI(digest Digest) (counter uint64, signature []byte, encryptedShares []byte, encryptedSecretH []byte, err error) {
	function := dlsymOrPanic(enclave.handle, "usig_create_ui")
	sgxSignature := new(C.sgx_ec256_signature_t)
	log.Printf("Hello from Usig Enclave CreateUI")
	testShare := make([]byte, n*(secretSize+1), n*(secretSize+1))
	testSecret := make([]byte, secretSize, secretSize)

	enclave.ecallLock.Lock()
	sgxErr := C.call_usig_create_ui(function,
		enclave.enclaveID, (*C.uint8_t)(&digest[0]),
		(*C.uint64_t)(&counter), sgxSignature, unsafe.Pointer(&testShare[0]), unsafe.Pointer(&testSecret[0]))
	enclave.ecallLock.Unlock()
	if err := sgxError(sgxErr); err != nil {
		panic(err)
	}

	log.Printf("Hello after Usig Enclave CreatUI")

	return counter, sgxEC256SigToASN1(sgxSignature), testShare, testSecret, nil
}

func (enclave *USIGEnclave) VerifyUI(digest Digest, signature []byte, encryptedShares []byte, encryptedSecretH []byte) ([]byte, Digest, error) {
	//
	function := dlsymOrPanic(enclave.handle, "usig_verify_ui")
	sgxSignature := BytesTosgxEC256Sig(signature)
	if encryptedShares == nil || encryptedSecretH == nil {
		log.Printf("Error in Usig!Something is nil")
	}

	testShare := make([]byte, secretSize+1, secretSize+1)
	var secretDigest Digest

	enclave.ecallLock.Lock()
	sgxErr := C.call_usig_verify_ui(function,
		enclave.enclaveID, (*C.uint8_t)(&digest[0]),
		sgxSignature, unsafe.Pointer(&encryptedSecretH[0]), unsafe.Pointer(&encryptedShares[0]), unsafe.Pointer(&testShare[0]), (*C.uint8_t)(&secretDigest[0]))
	enclave.ecallLock.Unlock()

	if err := sgxError(sgxErr); err != nil {
		return nil, digest, err
	}

	return testShare, secretDigest, nil
}

// VerifySignature verifies a USIG signature over the message digest,
// epoch and counter values, given a USIG public key.
func VerifySignature(pubKey interface{}, digest Digest, epoch, counter uint64, signature []byte) error {
	ecdsaPubKey, ok := pubKey.(*ecdsa.PublicKey)
	if !ok {
		return fmt.Errorf("invalid USIG ID format: expected ECDSA public key")
	}

	buf := bytes.NewBuffer(digest[:])
	err := binary.Write(buf, binary.LittleEndian, epoch)
	if err != nil {
		panic(err)
	}
	err = binary.Write(buf, binary.LittleEndian, counter)
	if err != nil {
		panic(err)
	}

	hash := sha256.Sum256(buf.Bytes())

	ecdsaSignature := new(struct{ R, S *big.Int })
	rest, err := asn1.Unmarshal(signature, ecdsaSignature)
	if err != nil {
		return fmt.Errorf("failed to unmarshal USIG signature: %v", err)
	} else if len(rest) != 0 {
		return fmt.Errorf("extra bytes in USIG signature")
	}

	if !ecdsa.Verify(ecdsaPubKey, hash[:], ecdsaSignature.R, ecdsaSignature.S) {
		return fmt.Errorf("signature not valid")
	}

	return nil
}

// Epoch retrieves the unique epoch value generated by this USIG
// enclave instance.
func (enclave *USIGEnclave) Epoch() uint64 {
	return enclave.epoch
}

// PublicKey retrieves the public part of the key used by USIG enclave
// instance to sign unique identifiers it produces
func (enclave *USIGEnclave) PublicKey() crypto.PublicKey {
	function := dlsymOrPanic(enclave.handle, "usig_get_pub_key")
	sgxPubKey := new(C.sgx_ec256_public_t)

	enclave.ecallLock.Lock()
	sgxErr := C.call_usig_get_pub_key(function, enclave.enclaveID, sgxPubKey)
	enclave.ecallLock.Unlock()
	sgxSuccessOrPanic(sgxErr)

	return sgxEC256PubKeyToGo(sgxPubKey)
}

// SealedKey retrieves the sealed key used by the USIG enclave. The
// retrieved key can be supplied to subsequent calls to
// NewUSIGEnclave() on the same physical machine.
func (enclave *USIGEnclave) SealedKey() []byte {
	function := dlsymOrPanic(enclave.handle, "usig_seal_key")
	var sealedData unsafe.Pointer
	var sealedDataSize C.size_t

	enclave.ecallLock.Lock()
	sgxErr := C.call_usig_seal_key(function, enclave.enclaveID, &sealedData, &sealedDataSize)
	enclave.ecallLock.Unlock()
	sgxSuccessOrPanic(sgxErr)

	bytes := C.GoBytes(sealedData, C.int(sealedDataSize))
	C.free(sealedData)

	return bytes
}

func sgxError(sgxErr C.sgx_status_t) error {
	if sgxErr != C.SGX_SUCCESS {
		return fmt.Errorf("SGX error: %x", sgxErr)
	}

	return nil
}

func sgxSuccessOrPanic(sgxErr C.sgx_status_t) {
	if err := sgxError(sgxErr); err != nil {
		panic(err)
	}
}

func sgxEC256SigToASN1(sgxSig *C.sgx_ec256_signature_t) []byte {
	sgxR, sgxS := sgxSig.x[:], sgxSig.y[:]
	r := sgxUint32SliceToBigInt(sgxR)
	s := sgxUint32SliceToBigInt(sgxS)

	ret, err := asn1.Marshal(struct{ R, S *big.Int }{r, s})
	if err != nil {
		panic(err)
	}

	return ret
}

func sgxEC256SigToBytes(sgxSig *C.sgx_ec256_signature_t) []byte {
	ret, err := asn1.Marshal(struct{ S *C.sgx_ec256_signature_t }{sgxSig})
	if err != nil {
		panic(err)
	}

	return ret
}
func BytesTosgxEC256Sig(sig []byte) (sgxSig *C.sgx_ec256_signature_t) {
	sgx_Struct := new(struct{ S *C.sgx_ec256_signature_t })
	asn1.Unmarshal(sig, sgx_Struct)

	return sgx_Struct.S
}
func sgxEC256PubKeyToGo(sgxPubKey *C.sgx_ec256_public_t) crypto.PublicKey {
	sgxX, sgxY := sgxPubKey.gx[:], sgxPubKey.gy[:]

	return &ecdsa.PublicKey{
		Curve: elliptic.P256(),
		X:     sgxUint8SliceToBigInt(sgxX),
		Y:     sgxUint8SliceToBigInt(sgxY),
	}
}

func sgxUint32SliceToBigInt(sgxArr []C.uint32_t) *big.Int {
	bytes := make([]byte, 0, len(sgxArr)*4)

	// Convert SGX representation encoded as a series of 32-bit
	// integers in little endian order to a big endian byte slice
	for i := len(sgxArr); i > 0; i-- {
		w := sgxArr[i-1]
		bytes = append(bytes,
			byte(w>>(3*8)),
			byte(w>>(2*8)),
			byte(w>>(1*8)),
			byte(w>>(0*8)))
	}

	return new(big.Int).SetBytes(bytes)
}

func sgxUint8SliceToBigInt(sgxArr []C.uint8_t) *big.Int {
	bytes := make([]byte, 0, len(sgxArr))

	// Convert SGX representation encoded as a series of bytes in
	// little endian order to big endian byte slice
	for i := len(sgxArr); i > 0; i-- {
		b := sgxArr[i-1]
		bytes = append(bytes, byte(b))
	}

	return new(big.Int).SetBytes(bytes)
}

func dlopen() (unsafe.Pointer, error) {
	f := C.CString(untrustedFile)
	defer C.free(unsafe.Pointer(f))

	handle := C.dlopen(f, C.RTLD_NOW|C.RTLD_GLOBAL)
	if handle == nil {
		return nil, dlerror()
	}

	return handle, nil
}

func dlclose(handle unsafe.Pointer) error {
	e := C.dlclose(handle)
	if e != 0 {
		return dlerror()
	}

	return nil
}

// dlsymOrPanic returns the address where the name of a function is loaded.
// Because a library that includes the functions is a part of this project
// (i.e. it is not a user-developed extension), we assume all the functions are
// implemented and if there is an error then call panic.
func dlsymOrPanic(handle unsafe.Pointer, name string) unsafe.Pointer {
	n := C.CString(name)
	defer C.free(unsafe.Pointer(n))

	pointer := C.dlsym(handle, n)
	if pointer == nil {
		panic(dlerror())
	}

	return pointer
}

func dlerror() error {
	s := C.dlerror()
	if s == nil {
		return nil
	}

	return errors.New(C.GoString(s))
}
